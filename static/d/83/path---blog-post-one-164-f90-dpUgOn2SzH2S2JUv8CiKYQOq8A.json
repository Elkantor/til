{"data":{"site":{"siteMetadata":{"title":"Gatsby Default Starter"}},"markdownRemark":{"id":"92f66adb-4bf8-515e-a8ba-93baced65352","excerpt":"styled-jsx  has been my preferred way of integrating CSS in JavaScript. It lets me write CSS in a more declarative fashion. It leads to code…","htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/zeit/styled-jsx"},"children":[{"type":"text","value":"styled-jsx"}]},{"type":"text","value":" has been my preferred way of integrating CSS in JavaScript. It lets me write CSS in a more declarative fashion. It leads to code that's easier to understand."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before I tell you why I prefer "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"styled-jsx"}]},{"type":"text","value":", let's learn about some programming concepts—It'll all make sense later, trust me!"}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Imperative vs. declarative code"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are two styles of expressing data. The most common way is to simply write it out as a data structure. We can call this a "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"declarative"}]},{"type":"text","value":" style of writing, where we try to express logic without providing any instructions."}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"{\n  \"name\": \"my-js-package\",\n  \"description\": \"A sample package\",\n  \"author\": \"Rico Sta. Cruz\"\n}\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are cases when this style may not be flexible enough, so some systems take an "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"imperative"}]},{"type":"text","value":" approach. In contrast to the declarative style, it's a piece of code with instructions that runs procedurally. Here's an example of a Ruby "},{"type":"element","tagName":"a","properties":{"href":"https://guides.rubygems.org/specification-reference/"},"children":[{"type":"text","value":"gem specification"}]},{"type":"text","value":", which defines a Ruby package's metadata:"}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rb"]},"children":[{"type":"text","value":"Gem::Specification.new do |spec|\n  spec.name = 'my-ruby-gem'\n  spec.summary = 'A sample package'\n  spec.authors = ['Rico Sta. Cruz']\nend\n"}]}]},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"Next: What's the difference?"}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"But they look the same!"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ruby's gem specification style is "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"imperative"}]},{"type":"text","value":" because we're issuing instructions that are to be ran sequentially. It can keep variables, call functions, and do all the things you can do in a Ruby program. Think of the Ruby gemspec as a program talking to the system:"}]},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Okay, computer. Build a new Gem specification."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Set the name to 'my-ruby-gem'."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Set the summary to 'A sample package'."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Finish building."}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"On the other hand, JavaScript's "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"declarative"}]},{"type":"text","value":" style isn't concerned with any instructions or control flow. It's not a piece of code that talks to your system, it's really just a table of keys and values."}]},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"Next: What makes imperative-style different?"}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Imperative is powerful"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Imperative style gives you the power to write expressions that you can't easily do with a declarative-style conventions. For instance, here's an example gem specification where the list of files are gathered via a system command ("},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"git ls-files"}]},{"type":"text","value":"):"}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rb"]},"children":[{"type":"text","value":"Gem::Specification.new do |spec|\n  spec.name = 'my-gem'\n  spec.summary = 'This is my gem'\n  spec.files = `git ls-files -z`.split(\"\\x0\")\nend\n"}]}]},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"Next: What makes declarative-style different?"}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Declarative is easier to understand"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Imperative conventions give developers a great amount of flexibility. However, this power comes at the cost of "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"complexity"}]},{"type":"text","value":". Here's an example where development dependencies are "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"imperatively"}]},{"type":"text","value":" defined in a Ruby gem, taking advantage of Ruby's "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array#each"}]},{"type":"text","value":" to reduce redundancy."}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-rb"]},"children":[{"type":"text","value":"Gem::Specification.new do |spec|\n  ['bundler', 'rake', 'minitest', 'rails'].each do |gemname|\n    spec.add_development_dependency(gemname)\n  end\nend\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In contrast, here's how it may be "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"declaratively"}]},{"type":"text","value":" defined in a JavaScript package's "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"package.json"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"{\n  \"dependencies\": {\n    \"react\": \"^16.0.0\",\n    \"react-dom\": \"^16.0.0\",\n    \"redux\": \"^4.0.1\"\n  }\n}\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"JavaScript's "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"declarative aproach"}]},{"type":"text","value":" may be less flexible than the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"imperative"}]},{"type":"text","value":" one, but the constraints of a JSON format makes things more predictable and easier to glance."}]},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"Next: What does this have to do with CSS?"}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"CSS is declarative"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"CSS is beautifully declarative. To write CSS is to write a list of rules, not a set of instructions. For instance, we would say "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"buttons are supposed to be blue"}]},{"type":"text","value":", rather than "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"turn all buttons to blue"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-css"]},"children":[{"type":"text","value":"/* \"Buttons are supposed to be blue\" in CSS. */\nbutton {\n  background: blue;\n}\n"}]}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"// \"Turn all buttons to blue\" in JavaScript.\n// (Please don't do this.)\nArray.from(document.querySelectorAll('button')).forEach(button => {\n  button.style.background = 'blue'\n})\n"}]}]},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"Next: What about CSS-in-JS?"}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"A lot of CSS-in-JS is imperative"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"At first glance, we can say that most CSS-in-JS solutions require you to write in a declarative style, since it's mostly just taking CSS and putting it in JavaScript. Here's how you would define a blue button using "},{"type":"element","tagName":"a","properties":{"href":"https://www.styled-components.com/"},"children":[{"type":"text","value":"styled-components"}]},{"type":"text","value":":"}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Button = styled.a`\n  background: blue;\n`\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"However, how would you start making red "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"danger"}]},{"type":"text","value":" buttons? With "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"styled-components"}]},{"type":"text","value":", you'll have to provide a function which returns a CSS fragment depending on how you would interpret "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"props"}]},{"type":"text","value":":"}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"// using styled-components\nconst Button = styled.a`\n  background: blue;\n\n  ${props =>\n    props.danger &&\n    css`\n      background: red;\n    `};\n`\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is where it starts to break down. We're now mixing the declarative nature of CSS with some rules that are written in an imperative style. We're also now interweaving 2 languages together—CSS and JavaScript—where your brain may have to switch contexts mid-way. This brain-context-switching is even more apparent in some other CSS-in-JS libraries:"}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-css"]},"children":[{"type":"text","value":"// using emotion\nconst Button = styled.a`\n  background: ${props => props.danger ? 'red' : 'blue'};\n  opacity: ${props => props.isHidden ? 0 : 1};\n`\n"}]}]},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"Next: Let's look at how styled-jsx solves this."}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Declarative CSS with styled-jsx"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/zeit/styled-jsx"},"children":[{"type":"text","value":"styled-jsx"}]},{"type":"text","value":" lets me write CSS in a declarative fashion. It also minimizes the interweaving of CSS and JavaScript code. This, in my opinion, makes styled-jsx code easier-to-understand, even at the modest cost of a little extra verbosity."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"How would you style a danger button differently in "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"styled-jsx"}]},{"type":"text","value":"? Just use CSS classes as you normally would. Simple!"}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const Button = ({ children, danger }) => {\n  return (\n    <a className={`button ${danger ? 'danger' : ''}`}>\n      {children}\n      <style jsx>{style}</style>\n    </a>\n  )\n}\n\nconst style = css`\n  .button {\n    background: blue;\n  }\n\n  .button.danger {\n    background: red;\n  }\n`\n"}]}]}]},"frontmatter":{"title":"My first post","date":"May 06, 2015"}}},"pageContext":{"node_id":"92f66adb-4bf8-515e-a8ba-93baced65352","nodeType":"post","title":"My first post","slug":"/blog-post-one/"}}