{"data":{"site":{"siteMetadata":{"title":"TIL"}},"markdownRemark":{"id":"6252dede-87b3-5973-8bc1-3bf016284fbe","excerpt":"When trying to merge two Git branches that have diverged a lot, it's a little difficult to make sense of what happened on both sides. Enterâ€¦","htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When trying to merge two Git branches that have diverged a lot, it's a little difficult to make sense of what happened on both sides."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Enter "},{"type":"element","tagName":"a","properties":{"href":"http://git-scm.com/docs/git-merge-base"},"children":[{"type":"text","value":"git merge-base"}]},{"type":"text","value":"--a simple built-in utility to tell you where two branches diverged. It will tell you the commit where the two branches split off:"}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"$ git merge-base develop master\nb8ac838cad3266f6a7e414181875831fd9b86ed5\n"}]}]},{"type":"comment","value":" {.-terminal} "},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Set up git tags"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This command will create a tag "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"_base"}]},{"type":"text","value":" that will point to where they both diverged."}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"git tag _base `git merge-base develop master`\n"}]}]},{"type":"comment","value":" {.-terminal} "},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Inspecting changes"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can then use "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"git diff"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"git log"}]},{"type":"text","value":", or "},{"type":"element","tagName":"a","properties":{"href":"https://jonas.nitro.dk/tig"},"children":[{"type":"text","value":"tig"}]},{"type":"text","value":" to inspect changes on either side:"}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"# Inspect changes in Gemfile on each side\ntig _base...develop -- Gemfile\ntig _base...master -- Gemfile\n\ngit diff _base...develop -- Gemfile\ngit diff _base...master -- Gemfile\n"}]}]},{"type":"comment","value":" {.-terminal} "},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Check if both branches diverged"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can also use the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--independent"}]},{"type":"text","value":" flag which will show commits that can't be reached by any other. If it prints 2 commits, it means that there are changes on both sides."}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"$ git merge-base develop master --independent\n46978182cc8d90439b862e772e99a3f71889901a\n8501118e0d958115caff692abda0f29ad530db4f\n"}]}]},{"type":"comment","value":" {.-terminal} "},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If it only prints 1, it means only one side has changes."}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"$ git merge-base develop master --independent\n8501118e0d958115caff692abda0f29ad530db4f\n"}]}]},{"type":"comment","value":" {.-terminal} "}]},"fields":{"slug":"/using-git-merge-base/"},"frontmatter":{"title":"Use git merge-base for big merges","date":"December 10, 2015","description":"Use this one command to help you with big Git merges.","attachments":null}}},"pageContext":{"node_id":"6252dede-87b3-5973-8bc1-3bf016284fbe","nodeType":"post","title":"Use git merge-base for big merges","slug":"/using-git-merge-base/","previous":{"id":"56ce3b2a-9d81-5ebd-bd48-b43fe22ca94b","fields":{"slug":"/selective-polyfilling/"},"frontmatter":{"title":"Selective polyfilling"}},"next":{"id":"d586c1d4-98ae-5001-93b5-a49fb4623441","fields":{"slug":"/use-vendor-bundle/"},"frontmatter":{"title":"Bundle your gems inside your project"}}}}