{"data":{"site":{"siteMetadata":{"title":"TIL"}},"markdownRemark":{"id":"b0266a1b-61a4-5108-b1c6-11e41bef4ae2","excerpt":"Most people reach for  lodash  for general-purpose JavaScript work. With the recent tides shifting towards functional programming,  Ramdaâ€¦","htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Most people reach for "},{"type":"element","tagName":"a","properties":{"href":"http://lodash.com/"},"children":[{"type":"text","value":"lodash"}]},{"type":"text","value":" for general-purpose JavaScript work. With the recent tides shifting towards functional programming, "},{"type":"element","tagName":"a","properties":{"href":"http://ramdajs.com/"},"children":[{"type":"text","value":"Ramda"}]},{"type":"text","value":" has become a popular option as well. I don't prefer to use them, let me show you why."}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Accumulated bloat"}]},{"type":"element","tagName":"h3","properties":{},"children":[]},{"type":"comment","value":" {.-literate-style} "},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I love both lodash and Ramda, but they're a bit too bloated to use for web apps. A simple "},{"type":"element","tagName":"a","properties":{"href":"https://lodash.com/docs#map"},"children":[{"type":"text","value":"lodash.map"}]},{"type":"text","value":" weighs in at a whopping 24 kilobytes:"}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"$ browserify -r lodash/map | uglifyjs -cm | wc -c\n24895\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ramda's "},{"type":"element","tagName":"a","properties":{"href":"http://ramdajs.com/0.21.0/docs/#map"},"children":[{"type":"text","value":"R.map"}]},{"type":"text","value":" is slimmer, but still hefty at 7kb:"}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"$ browserify -r ramda/src/pluck | uglifyjs -cm | wc -c\n7750\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This may not seem like much, but for a web application, every kilobyte matters."}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Loops"}]},{"type":"element","tagName":"h3","properties":{},"children":[]},{"type":"comment","value":" {.-literate-style} "},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"While JavaScript comes with "},{"type":"element","tagName":"a","properties":{"href":"http://devdocs.io/javascript/global_objects/array/map"},"children":[{"type":"text","value":"Array.prototype.map"}]},{"type":"text","value":", it's not very useful for objects. I don't appreciate that iterating through arrays are done differently from iterating through objects. Not only that, but iterating through "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Object.keys().map"}]},{"type":"text","value":" is one of the slower ways of looping through an object's keys."}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"// Iterating through arrays\narray.map((val, key) => {\n  /*...*/\n})\n\n// Iterating through objects\nObject.keys(object).map(key => {\n  let val = object[key]\n  /*...*/\n})\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For this, I prefer "},{"type":"element","tagName":"a","properties":{"href":"https://www.npmjs.com/package/object-loops"},"children":[{"type":"text","value":"object-loops"}]},{"type":"text","value":". "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"object-loops/map"}]},{"type":"text","value":" is only 1kb!"}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"import map from 'object-loops/map'\nmap(array, (val, key) => {\n  /*...*/\n})\nmap(object, (val, key) => {\n  /*...*/\n})\n"}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Immutable set/get"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Setting deep keys is something that's needed in every "},{"type":"element","tagName":"a","properties":{"href":"http://redux.js.org/"},"children":[{"type":"text","value":"Redux"}]},{"type":"text","value":"-powered app. While most Redux guides advice you to use the "},{"type":"element","tagName":"a","properties":{"href":"http://devguides.io/redux/introduction#the-spread-operator"},"children":[{"type":"text","value":"spread operator"}]},{"type":"text","value":", it quickly gets unwieldy for deep structures."}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"// Plain mutable JS\nstate.albums[id] = album\n\n// ESnext syntax\nstate = {\n  ...state,\n  albums: {\n    ...state.albums,\n    [id]: album\n  }\n}\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For this, "},{"type":"element","tagName":"a","properties":{"href":"https://www.npmjs.com/package/101"},"children":[{"type":"text","value":"101"}]},{"type":"text","value":" comes with "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"101/put"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"101/pluck"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"import set from '101/put'\nimport get from '101/pluck'\n\nstate = set(state, `albums.${id}`, album)\nget(state, `albums.${id}`)\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It comes with "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"101/omit"}]},{"type":"text","value":" as well as an immutable analogue for "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"delete"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"// Plain mutable JS\ndelete state.albums[id]\n\n// Using 101\nimport del from '101/omit'\ndel(state, `albums.${id}`)\n"}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Recap"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.npmjs.com/package/object-loops"},"children":[{"type":"text","value":"object-loops"}]},{"type":"text","value":" is great for iteration."}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"// Iterating\nimport map from 'object-loops/map'\n\nmap(state.albums, (val, key) => {\n  /*...*/\n})\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.npmjs.com/package/101"},"children":[{"type":"text","value":"101"}]},{"type":"text","value":" is great for setting/getting values from deep structures."}]},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"// Setting and getting\nimport set from '101/put'\nimport get from '101/pluck'\nimport del from '101/omit'\n\nstate = set(state, `albums.${id}`, album)\nstate = del(state, `albums.${id}`)\nget(state, `albums.${id}`)\n"}]}]}]},"fields":{"slug":"/my-immutable-toolkit/"},"frontmatter":{"title":"Tools for immutable work","date":"August 25, 2016"}}},"pageContext":{"node_id":"b0266a1b-61a4-5108-b1c6-11e41bef4ae2","nodeType":"post","title":"Tools for immutable work","slug":"/my-immutable-toolkit/","previous":{"id":"e223e8ec-c48f-523b-be41-e8c7545ff7dd","fields":{"slug":"/filtering-falsy-values/"},"frontmatter":{"title":"Filtering falsy values"}},"next":{"id":"8b024c22-b99c-518e-9ff7-c7687dec6a9c","fields":{"slug":"/ordered-keys-in-js/"},"frontmatter":{"title":"Ordered keys in JS objects"}}}}