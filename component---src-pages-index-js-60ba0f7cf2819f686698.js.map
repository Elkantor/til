{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/Layout.js"],"names":["_react","_interopRequireDefault","__webpack_require__","_gatsby","_Layout","Item","_ref","node","slug","fields","_node$frontmatter","frontmatter","title","date","default","createElement","Link","to","props","edges","data","allMarkdownRemark","map","edge","key","Error","_propTypes","_gatsbyLink","_interopRequireWildcard","_publicPageRenderer","_parsePath","StaticQueryContext","React","createContext","StaticQuery","Consumer","staticQueryData","query","render","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","_pageRenderer","_loader","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","_reactHelmet","site","siteMetadata","Fragment","meta","name","content","lang","_"],"mappings":"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","file":"component---src-pages-index-js-60ba0f7cf2819f686698.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport Layout from '../components/Layout'\n\nconst IndexPage = props => {\n  const data = props.data\n  const { edges } = data.allMarkdownRemark\n\n  return (\n    <Layout>\n      <h1>Hi people</h1>\n      <p>Welcome to your new Gatsby site.</p>\n      <p>Now go build something great.</p>\n      {edges.map(edge => (\n        <Item node={edge.node} key={edge.node.fields.slug} />\n      ))}\n    </Layout>\n  )\n}\n\nexport const Item = ({ node }) => {\n  const { slug } = node.fields\n  const { title, date } = node.frontmatter\n  return (\n    <div>\n      <Link to={slug}>\n        <strong>{title || slug}</strong>\n        <small>{date}</small>\n      </Link>\n    </div>\n  )\n}\n\nexport default IndexPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport 'sanitize.css'\nimport './Layout.css'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => {\n      const { title } = data.site.siteMetadata\n\n      return (\n        <>\n          <Helmet\n            title={title}\n            meta={[\n              { name: 'description', content: 'Sample' },\n              { name: 'keywords', content: 'sample, something' },\n            ]}\n          >\n            <html lang=\"en\" />\n          </Helmet>\n          <div>{children}</div>\n        </>\n      )\n    }}\n  />\n)\n\nexport default Layout\n"],"sourceRoot":""}