{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/Layout.js","webpack:///./src/components/PostTitleSnip.js","webpack:///./src/components/PageList.js","webpack:///./src/components/PostLink.js"],"names":["_react","_interopRequireDefault","__webpack_require__","_Layout","_PageList","props","pages","data","allMarkdownRemark","edges","map","edge","node","key","fields","slug","default","createElement","Error","_propTypes","_gatsbyLink","_interopRequireWildcard","_publicPageRenderer","_parsePath","StaticQueryContext","React","createContext","StaticQuery","Consumer","staticQueryData","query","render","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","_pageRenderer","_loader","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","_reactHelmet","_gatsby","title","site","siteMetadata","Fragment","meta","name","content","lang","_","_reactOverdrive","_PostTitleSnipScoped","varClass","variant","className","__hash","id","_style","styleId","css","_PostLink","_PageListScoped","_ref2","_PostLinkScoped","_PostTitleSnip","_node$frontmatter","frontmatter","date","Link","to","class","PostTitleSnip"],"mappings":"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","file":"component---src-pages-index-js-c3551fdce76dd9bfdc02.js","sourcesContent":["/*\n * Home page\n * =========\n *\n * @flow\n */\n\nimport React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/Layout'\nimport PageList from '../components/PageList'\nimport { type PageNode } from '../types'\n\nexport type Props = {\n  data: {\n    site: {\n      siteMetadata: { title: string },\n    },\n    allMarkdownRemark: {\n      edges: Array<{\n        node: PageNode,\n      }>,\n    },\n  },\n}\n\nconst IndexPage = (props: Props) => {\n  const data = props.data\n  const { edges } = data.allMarkdownRemark\n\n  const pages = edges.map((edge: { node: PageNode }) => ({\n    node: edge.node,\n    key: edge.node.fields.slug,\n  }))\n\n  return (\n    <Layout>\n      <PageList pages={pages} />\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport 'sanitize.css'\nimport './Layout.css'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => {\n      const { title } = data.site.siteMetadata\n\n      return (\n        <>\n          <Helmet\n            title={title}\n            meta={[\n              { name: 'description', content: 'Sample' },\n              { name: 'keywords', content: 'sample, something' },\n            ]}\n          >\n            <html lang=\"en\" />\n          </Helmet>\n          <div>{children}</div>\n        </>\n      )\n    }}\n  />\n)\n\nexport default Layout\n","// @flow\n\nimport Overdrive from 'react-overdrive'\nimport React from 'react'\nimport style from './PostTitleSnip.scoped.css'\n\nexport type Props = {\n  slug: string,\n  title: string,\n  variant?: '-small' | null\n}\n\nexport const PostTitleSnip = ({ slug, title, variant }: Props) => {\n  const varClass = variant || ''\n\n  return (\n    <span className={`post-title-snip-c ${varClass}`}>\n      <Overdrive id={`post-${slug}`}>\n        <strong className={`post-title-snip ${varClass}`}>{title}</strong>\n      </Overdrive>\n\n      <style jsx>{style}</style>\n    </span>\n  )\n}\n","// @flow\n\nimport PostLink from '../components/PostLink'\nimport React from 'react'\nimport { type PageNode } from '../types'\nimport style from './PageList.scoped.css'\n\nexport type Props = {\n  pages: Array<{ node: PageNode, key: string }>\n}\n\nconst PageList = ({ pages }: Props) => {\n  return (\n    <div className=\"page-list\">\n      {pages.map(({ node, key }) => (\n        <PostLink node={node} key={key} />\n      ))}\n      <style jsx>{style}</style>\n    </div>\n  )\n}\n\nexport default PageList\n","import { Link } from 'gatsby'\nimport React from 'react'\nimport style from './PostLink.scoped.css'\nimport { PostTitleSnip } from './PostTitleSnip'\n\nconst PostLink = ({ node }) => {\n  const { slug } = node.fields\n  const { title, date } = node.frontmatter\n  return (\n    <article className=\"post-link\">\n      <Link to={slug} class=\"link\">\n        <PostTitleSnip {...{ slug, title }} />\n        <small className=\"date\">{date}</small>\n      </Link>\n      <style jsx>{style}</style>\n    </article>\n  )\n}\n\nexport default PostLink\n"],"sourceRoot":""}